
from flask import Blueprint, redirect, request, jsonify, url_for
import os
import logging
import urllib.parse
import datetime
import requests
from app.routes.spotify_auth import get_user_from_token
from flask_cors import cross_origin

logging.basicConfig(level=logging.INFO)

# Spotify API endpoints
AUTH_URL = 'https://accounts.spotify.com/authorize'
TOKEN_URL = 'https://accounts.spotify.com/api/token'
API_BASE_URL = 'https://api.spotify.com/v1/'


spotify_routes = Blueprint('spotify_routes', __name__)


#search for the top 50 playlist and return the song qualities of that list. 
@spotify_routes.route('/search', methods=['GET'])
@cross_origin(supports_credentials=True, origins='*')
def get_top_50_playlist():
    access_token = request.headers.get('Authorization').split(' ')[1]
    user = get_user_from_token(access_token)
    user_id = user['id']


    if not user_id or not access_token:
        return jsonify({'error': 'Missing user_id or access_token'}), 400
    country = request.args.get('country')
    if not country:
        return jsonify({"error": "Country parameter is missing"}), 400

    headers = {'Authorization': f'Bearer {access_token}'}
    params = {'q': f'top 50 {country}', 'type': 'playlist', 'limit': 1}
    response = requests.get(API_BASE_URL + 'search', headers=headers, params=params)

 
    if response.status_code != 200:
        return jsonify({'error': 'Failed to fetch top 50 playlist from Spotify'}), response.status_code

    data = response.json()
    if not data['playlists']['items']: 
        return jsonify({'error': 'No playlist found'}), 404

    playlist_id = data['playlists']['items'][0]['id']
    return get_playlist_tracks(playlist_id, access_token)

def get_playlist_tracks(playlist_id, access_token):
        headers = {'Authorization': f'Bearer {access_token}'}
        response = requests.get(f"{API_BASE_URL}playlists/{playlist_id}/tracks", headers=headers)
        logging.info(f'Inside Get Playlist Tracks, Spotify response: {response.status_code}')

        if response.status_code != 200:
            return jsonify({"error": "Failed to fetch tracks from Spotify"}), response.status_code

        data = response.json()
        track_ids = [item['track']['id'] for item in data['items']]

        return get_audio_features(track_ids, access_token)


def get_audio_features(track_ids, access_token):
        logging.info("inside get_audio_features")
        headers = {'Authorization': f'Bearer {access_token}'}
        params = {'ids': ','.join(track_ids)}
        response = requests.get(f"{API_BASE_URL}audio-features", headers=headers, params=params)

        if response.status_code != 200:
            return jsonify({"error": "Failed to fetch audio features from Spotify"}), response.status_code

        data = response.json()
        if 'audio_features' not in data:
            return jsonify({"error": "Failed to extract audio features from Spotify response"})

        return jsonify(data['audio_features']) 
    
    # Create a new Spotify playlist
@spotify_routes.route('/create-playlist', methods=['POST'])
@cross_origin(supports_credentials=True, origins='*')
def create_playlist(access_token, playlist_name):
    print("inside create_playlist")
    user = get_user_from_token(access_token)
    if not user or 'id' not in user:
        return jsonify({"error": "User not found or invalid access token"}), 404
    user_id = user['user_id']
    
    response = requests.post(
        f"{API_BASE_URL}users/{user_id}/playlists",
        headers={'Authorization': f'Bearer {access_token}'},
        json={'name': playlist_name, 'description': 'Generated by WeatherBeats', 'public': True}
    )
    if response.status_code != 201:
        return jsonify({"error": "Failed to create playlist"}), response.status_code

    playlist_id = response.json()['id']
    print("playlist_id", playlist_id)
    return {'playlist_id': playlist_id, 'playlist_name': playlist_name}

# Add tracks to a Spotify playlist
@spotify_routes.route('/add-tracks', methods=['POST'])
@cross_origin(supports_credentials=True, origins='*')
def add_tracks_to_playlist(playlist_id, track_uris, access_token):
    print("inside add_tracks_to_playlist")
    response = requests.post(
        f"{API_BASE_URL}playlists/{playlist_id}/tracks",
        headers={'Authorization': f'Bearer {access_token}'},
        json={'uris': track_uris}
    )
 
    if response.status_code != 201:
        return jsonify({"error": "Failed to add tracks to playlist"}), response.status_code

    return jsonify({'success': True, 'playlist_id': playlist_id})